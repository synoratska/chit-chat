const { db } = require('../util/admin')// Get All Gossipsexports.getAllGossips =  (req, res) => {    db        .collection('gossips')        .orderBy('createdAt', 'desc')        .get()        .then((data) => {               let gossips = []               data.forEach((doc) => {                gossips.push({                    gossipId: doc.id,                    body: doc.data().body,                    userHandle: doc.data().userHandle,                    createdAt: doc.data().createdAt,                    commentCount: doc.data().commentCount,                    likeCount: doc.data().likeCount,                    userImage: doc.data().userImage                })            })            return res.json(gossips)        })        .catch((err) => {            console.error(err)            res.status(500)                .json({error: err.code})        })    }// Post One Gossipexports.postOneGossip = (req, res) => {    if(req.body.body.trim() === '') {        return res.status(400)            .json({body: 'Body must not be empty'})    }    const newGossip = {        body: req.body.body,        userHandle: req.user.handle,        userImage: req.user.imageUrl,        createdAt: new Date().toISOString(),        likeCount: 0,        commentCount: 0    }        db            .collection('gossips')            .add(newGossip)            .then((doc) => {                const resGossip = newGossip                resGossip.gossipId = doc.id                res.json(resGossip)            })            .catch((err) => {                res.status(500)                    .json({ error: 'Something went wrong' })                console.error(err)            })    }// Fetch One Gossip    exports.getGossip = (req, res) => {        let gossipData = {}        db.doc(`/gossips/${req.params.gossipId}`)            .get()            .then((doc) => {                if(!doc.exists){                    return res.status(404)                        .json({error: 'Gossip is not found'})                }                gossipData = doc.data()                gossipData.gossipId = doc.id                return db                    .collection('comments')                    .orderBy('createdAt', 'desc')                    .where('gossipId', '==', req.params.gossipId)                    .get()            })            .then((data) => {                gossipData.comments = []                data.forEach((doc) => {                    gossipData.comments.push(doc.data())                })                return res.json(gossipData)            })            .catch((err) => {                console.error(err)                res.status(500)                    .json({ error: err.code })            })    }//    Comment On a Gossipexports.commentOnGossip = (req, res) => {    if(req.body.body.trim() === '')        return res.status(400).json({ comment: 'Must not be empty' })    const newComment = {        body: req.body.body,        createdAt: new Date().toISOString(),        gossipId: req.params.gossipId,        userHandle: req.user.handle,        userImage: req.user.imageUrl    }    db.doc(`/gossips/${req.params.gossipId}`)        .get()        .then((doc) => {            if(!doc.exists){                return res.status(404)                    .json({error: 'Gossip not found'})            }            return doc.ref.update({ commentCount: doc.data().commentCount +1 })        })        .then(() => {            return db                .collection('comments')                .add(newComment)        })        .then(() => {            res.json(newComment)        })        .catch((err) => {            console.log(err)            res.status(500)                .json({error: 'Something went wrong'})        })}//Like a gossipexports.likeGossip = (req, res) => {    const likeDocument = db        .collection('likes')        .where('userHandle', '==', req.user.handle)        .where('gossipId', '==', req.params.gossipId)        .limit(1)    const gossipDocument = db.doc(`/gossips/${req.params.gossipId}`)    let gossipData    gossipDocument        .get()        .then((doc )=> {        if(doc.exists){            gossipData = doc.data()            gossipData.gossipId = doc.id            return likeDocument.get()        } else {            return res.status(404)                .json({ error : 'Gossip not found'})        }    })        .then((data) => {            if (data.empty){              return db                  .collection('likes')                  .add({                      gossipId: req.params.gossipId,                      userHandle: req.user.handle                  })                  .then(() => {                      gossipData.likeCount++                      return gossipDocument                          .update({ likeCount: gossipData.likeCount })                  })                  .then(() => {                      return res.json(gossipData)                  })            } else {                return res.status(400)                    .json({ error: 'Gossip already liked'})            }        })        .catch((err) => {            console.error(err)            res.status(500)                .json({ error : err.code })        })}exports.unlikeGossip = (req, res)=> {    const likeDocument = db        .collection('likes')        .where('userHandle', '==', req.user.handle)        .where('gossipId', '==', req.params.gossipId)        .limit(1)    const gossipDocument = db.doc(`/gossips/${req.params.gossipId}`)    let gossipData    gossipDocument        .get()        .then((doc )=> {            if(doc.exists){                gossipData = doc.data()                gossipData.gossipId = doc.id                return likeDocument.get()            } else {                return res.status(404)                    .json({ error: 'Gossip not found'})            }        })        .then((data) => {            if (data.empty){                return res.status(400)                    .json({ error: 'Gossip not liked'})            } else {                return db                    .doc(`/likes/${data.docs[0].id}`)                    .delete()                    .then(() => {                        gossipData.likeCount--                        return gossipDocument.update({likeCount: gossipData.likeCount})                    })                    .then(() => {                        res.json(gossipData)                    })            }        })        .catch((err) => {            console.error(err)            res.status(500)                .json({ error : err.code })        })}// Delete a gossipexports.deleteGossip = (req, res) => {    const document = db.doc(`/gossips/${req.params.gossipId}`)    document.get()        .then((doc) => {            if(!doc.exists){                return res                    .status(404)                    .json({error : 'Gossip not found'})            }            if(doc.data().userHandle !== req.user.handle) {                return res.status(403)                    .json({error: 'Unauthorized'})            }else{                return document.delete()            }        })        .then(() => {            res.json({message: 'Gossip deleted successfully'})        })        .catch((err) => {            console.error(err)            return res.status(500)                .json({ error: err.code })        })}